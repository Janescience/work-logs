import NextAuth from 'next-auth';
import CredentialsProvider from 'next-auth/providers/credentials';
import User from '@/models/user.model'; // Path to your User model
import bcrypt from 'bcryptjs';
import dbConnect from '@/lib/mongodb'; // Assuming you have a db connection utility

// กำหนด authOptions เป็น constant และ export ออกไป
export const authOptions = {
    providers: [
        CredentialsProvider({
            name: 'Credentials',
            credentials: {
                username: { label: 'Username', type: 'text' },
                password: { label: 'Password', type: 'password' }
            },
            async authorize(credentials, req) {
                await dbConnect(); // Connect to your MongoDB database

                const { username, password } = credentials;

                // 1. Find the user by username
                const user = await User.findOne({ username });

                if (!user) {
                    throw new Error('No user found with this username.');
                }

                // 2. Compare the provided password with the hashed password in the database
                const isValid = await bcrypt.compare(password, user.password);

                if (!isValid) {
                    throw new Error('Invalid credentials.');
                }

                // 3. Return user object if authentication is successful
                // This object will be available in the session.
                return {
                    id: user._id.toString(), // NextAuth requires an 'id' field
                    name: user.username,
                    email: user.email,
                    roles: user.roles // Make sure to include the roles array
                };
            }
        })
    ],
    session: {
        strategy: 'jwt', // Use JWT for session management (recommended for stateless APIs)
        maxAge: 30 * 24 * 60 * 60, // 30 days - Persistent login (adjust as needed)
    },
    jwt: {
        secret: process.env.NEXTAUTH_SECRET, // IMPORTANT: Set this in .env.local
    },
    callbacks: {
        async jwt({ token, user }) {
            // Add user info to JWT token
            if (user) {
                token.id = user.id;
                token.name = user.name;
                token.email = user.email;
                token.roles = user.roles;
            }
            return token;
        },
        async session({ session, token }) {
            // Add JWT token info to session
            if (token) {
                session.user.id = token.id;
                session.user.name = token.name;
                session.user.email = token.email;
                session.user.roles = token.roles;
            }
            return session;
        }
    },
    pages: {
        signIn: '/login', // Redirect unauthenticated users to this page
    },
    useSecureCookies: process.env.NODE_ENV === 'production',
    cookies: {
        sessionToken: {
            name: process.env.NODE_ENV === 'production' ? '__Secure-next-auth.session-token' : 'next-auth.session-token',
            options: {
                httpOnly: true,
                sameSite: 'lax',
                path: '/',
                secure: process.env.NODE_ENV === 'production',
            }
        }
    },
    // Optional: Add a secret for signing JWTs and encrypting cookies.
    // This is a random string generated by `openssl rand -base64 32` or similar.
    secret: process.env.NEXTAUTH_SECRET,
};

// สร้าง handler instance จาก NextAuth โดยใช้ authOptions
const handler = NextAuth(authOptions);

// Export named GET และ POST functions สำหรับ Next.js App Router API Routes
export { handler as GET, handler as POST };
